"""
Django settings for grandview project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-p=ag)#dxywkov=na&&l9%6kp!y%)$%$anw(gxamoih__oxwujl'  # Replace with a secure key in production
# To generate a new secret key: python -c "import secrets; print(secrets.token_urlsafe(50))"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # Set to False in production

# For local mobile testing: Add your local IP (e.g., run `ipconfig` or `ifconfig` to find it)
# Example: ALLOWED_HOSTS = ['localhost', '127.0.0.1', '192.168.1.100']  # Replace with your machine's IP
ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0']  # Added '0.0.0.0' for broader local access; restrict in prod


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',  # Added for CORS support
    'accounts',
    'phonenumber_field',
    'packages',
    'wallet',
    'adverts',
    'dashboard',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Must be first for CORS
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Custom User model
AUTH_USER_MODEL = 'accounts.CustomUser'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',  # For API token auth
        'rest_framework.authentication.SessionAuthentication',  # For session-based auth
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',  # Secure API by default
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',
        'user': '1000/day'
    },
    # Token expiry: DRF Token doesn't expire by default. For expiry, consider JWT (install djangorestframework-simplejwt)
    # If using JWT, add 'rest_framework_simplejwt' to INSTALLED_APPS and update DEFAULT_AUTHENTICATION_CLASSES to:
    # ['rest_framework_simplejwt.authentication.JWTAuthentication', ...]
    # SIMPLE_JWT = { 'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60), 'REFRESH_TOKEN_LIFETIME': timedelta(days=7) }
    'UNAUTHENTICATED_USER': None,  # Handle unauthenticated users gracefully
}

# For token expiry with DRF Token: You'll need a custom token model or periodic cleanup task.
# Example: In a management command, delete old tokens: Token.objects.filter(created__lt=timezone.now() - timedelta(days=7)).delete()
# Run via cron: 0 0 * * * python manage.py cleanup_tokens

# CORS Settings (for Next.js frontend and mobile local testing)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Your Next.js dev server
    "http://127.0.0.1:3000",
    # For mobile local testing: Add your machine's IP (e.g., for accessing frontend on mobile browser)
    # "http://192.168.1.100:3000",  # Replace with your local IP
    # For Django API from mobile: Mobile apps/browsers can access via IP:port, but CORS is for web origins
]

# Allow all origins for local dev (insecure, remove in prod! Use specific origins above)
CORS_ALLOW_ALL_ORIGINS = True  # Temporary for local/mobile testing; set to False in production

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CORS_ALLOW_CREDENTIALS = True  # Allow cookies/sessions if using session auth

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    # For mobile: Add your local IP
    # "http://192.168.1.100:3000",  # Replace with your local IP
]

ROOT_URLCONF = 'grandview.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'grandview.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]  # For static files in development
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # For collectstatic in production

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Email backend
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # Use SMTP for real emails
EMAIL_HOST = 'smtp.gmail.com'  # Updated to Gmail SMTP (replace with your provider)
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'globalgrowthinvest@gmail.com'  # Your email
EMAIL_HOST_PASSWORD = 'fdvyuvtreqtoocir'  # Your app-specific password (see note below) - NEVER commit this in prod; use env vars

# For development, use console backend instead (prints emails to console)
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Security settings (enhanced for better protection)
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
SESSION_COOKIE_SECURE = False  # Set to True in production with HTTPS
CSRF_COOKIE_SECURE = False  # Set to True in production with HTTPS
SESSION_COOKIE_HTTPONLY = True  # Prevent JS access to session cookie
CSRF_COOKIE_HTTPONLY = False  # Typically False for AJAX
SECURE_HSTS_SECONDS = 0  # Set >0 in production for HSTS
SECURE_HSTS_INCLUDE_SUBDOMAINS = False
SECURE_HSTS_PRELOAD = False
SECURE_REDIRECT_EXEMPT = []  # Customize if needed

# For production: Add SECURE_SSL_REDIRECT = True when behind HTTPS proxy/load balancer

# Login/Redirect Settings
LOGIN_URL = '/api/accounts/login/'  # Your API login endpoint
LOGOUT_REDIRECT_URL = '/'
LOGIN_REDIRECT_URL = '/'  # Redirect after login

# Logging (for debugging issues)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# For mobile local testing:
# 1. Run Django: python manage.py runserver 0.0.0.0:8000
# 2. Find your machine's IP (e.g., 192.168.1.100)
# 3. On mobile: Access http://192.168.1.100:8000/api/... for API
# 4. For Next.js frontend: Run on same machine, access http://192.168.1.100:3000 on mobile
# 5. Update ALLOWED_HOSTS and CORS_ALLOWED_ORIGINS with your IP as shown in comments above
# 6. Ensure mobile and machine on same WiFi network
# 7. For token expiry: If needed, install djangorestframework-simplejwt via pip and uncomment the JWT config above